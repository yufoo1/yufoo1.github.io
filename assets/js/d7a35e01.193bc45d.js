"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[7528],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)n=s[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,s=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,f=d["".concat(l,".").concat(u)]||d[u]||m[u]||s;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=n.length,i=new Array(s);i[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},709:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));const s={sidebar_position:6},i="Classes",o={unversionedId:"cpp/Classes",id:"cpp/Classes",title:"Classes",description:"Classes Intro",source:"@site/docs/cpp/Classes.md",sourceDirName:"cpp",slug:"/cpp/Classes",permalink:"/docs/cpp/Classes",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Classes.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Iterators and Pointers",permalink:"/docs/cpp/Iterators and Pointers"},next:{title:"Template Classes and Const Correctness",permalink:"/docs/cpp/Template Classes and Const Correctness"}},l={},p=[{value:"Classes Intro",id:"classes-intro",level:2},{value:"Define",id:"define",level:3},{value:"Constructors",id:"constructors",level:3},{value:"Arrays",id:"arrays",level:3},{value:"Template Classes Intro",id:"template-classes-intro",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"classes"},"Classes"),(0,r.kt)("h2",{id:"classes-intro"},"Classes Intro"),(0,r.kt)("h3",{id:"define"},"Define"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Class")," is a programmer-defined custom type, an abstraction of an object or data type. Classes provide their users with a public interface and separate this from a private implementation. ",(0,r.kt)("inlineCode",{parentName:"p"},"Public")," section often defines an ",(0,r.kt)("inlineCode",{parentName:"p"},"interface")," for interacting with the private member variables. ",(0,r.kt)("inlineCode",{parentName:"p"},"Private")," section usually contains all member variables and Users can't access or modify anything in the private section."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// student.h\nclass Student {\n    public:\n    std::string getName();\n    void setName(std::string name);\n\n    private:\n    std::string name;\n}\n\n// student.cpp\n#include student.h\nstd::string Student::getName() {\n    // implementation\n}\n\nvoid Student::setName(std::string name) {\n    \n}\n\n\n")),(0,r.kt)("p",null,"Each class has its own namespace. Syntax for calling / using something in a namespace is ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace_name::name"),". Inside the ",(0,r.kt)("inlineCode",{parentName:"p"},"{...}")," the private member variables for ",(0,r.kt)("inlineCode",{parentName:"p"},"namespace_name")," will be in scope."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"this->element_name")," means the item in this object with name ",(0,r.kt)("inlineCode",{parentName:"p"},"element_name"),". You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"this")," for naming conflicts."),(0,r.kt)("h3",{id:"constructors"},"Constructors"),(0,r.kt)("p",null,"Constructors define how the member variables of an object is initialized, which is what gets called when you first create this object."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'Student::Student() {\n    name = "Ken";\n}\n')),(0,r.kt)("p",null,"A class can have multiple constructors, which are called overloadable."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'Student::Student() {\n    name = "Ken";\n}\n\nStudent::Student(std::string name) {\n    this->name = name;\n}\n')),(0,r.kt)("p",null,"You can use initializer lists for speedier construction."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'// student.cpp\n#include student.h\nStudent::Student() : name{""} {}\nStudent::Student(std::string name) : name{name} {}\n')),(0,r.kt)("h3",{id:"arrays"},"Arrays"),(0,r.kt)("p",null,"Arrays are memory we allocate, so we need to give instruction for when to deallocate that memory. When we are done using our array, we need to ",(0,r.kt)("inlineCode",{parentName:"p"},"delete []")," it."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int* my_int_array;\nmy_int_array = new int[10];\nint one_element = my_int_array[0];\ndelete[] my_int_array;\n")),(0,r.kt)("p",null,"Deleteing(almost) always happens in the destructor of a class. The destructor is defined using ",(0,r.kt)("inlineCode",{parentName:"p"},"Class_name::~Class_name()"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// student.cpp\n#include student.h\nStudent::~Student() {\n    delete[] my_array;\n}\n")),(0,r.kt)("h2",{id:"template-classes-intro"},"Template Classes Intro"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Template Class")," is a class that is parametrized over some number of types. A class that is comprised of member variables of a general type / types."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"// mypair.h\ntemplate<typename First, typename Second> struct MyPair {\n    First first;\n    Second second;\n};\n\n\ntemplate<typename First, typename Second> class Mypair {\n    public:\n        First getFirst();\n        Second getSecond();\n\n        void setFirst(First f);\n        void setSecond(Second s);\n    private:\n        First first;\n        Second second;  \n};\n\n\n// mypair.cpp\ntemplate<typename First, typename Second>\nFirst MyPair::getFirst() {\n    return first;\n}\n")))}d.isMDXComponent=!0}}]);