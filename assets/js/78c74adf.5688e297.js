"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6909],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),u=l(n),d=a,f=u["".concat(c,".").concat(d)]||u[d]||m[d]||o;return n?r.createElement(f,i(i({ref:t},s),{},{components:n})):r.createElement(f,i({ref:t},s))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p[u]="string"==typeof e?e:a,i[1]=p;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>p,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:8},i="Template Functions",p={unversionedId:"cpp/Template Functions",id:"cpp/Template Functions",title:"Template Functions",description:"Generic Programming and Template Functions",source:"@site/docs/cpp/Template Functions.md",sourceDirName:"cpp",slug:"/cpp/Template Functions",permalink:"/docs/cpp/Template Functions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Template Functions.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Template Classes and Const Correctness",permalink:"/docs/cpp/Template Classes and Const Correctness"},next:{title:"Functions and Lambdas",permalink:"/docs/cpp/Functions and Lambdas"}},c={},l=[{value:"Generic Programming and Template Functions",id:"generic-programming-and-template-functions",level:2},{value:"Template Metaprogramming",id:"template-metaprogramming",level:2}],s={toc:l};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"template-functions"},"Template Functions"),(0,a.kt)("h2",{id:"generic-programming-and-template-functions"},"Generic Programming and Template Functions"),(0,a.kt)("p",null,"C++ is strongly typed, but generic C++ lets you parametrize data types. Template functions are completely generic functions."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename Type = int>\nType myMin(Type a, Type b) {\n    return a < b ? a : b;\n}\n\ncout << myMin<int>(3, 4) << endl;\n")),(0,a.kt)("p",null,"We can also implicitly leave it for the compiler to deduce."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename Type = int>\nauto mySmarterMin(T a, U b) {\n    return a < b ? a : b;\n}\n\ncout << mySmarterMin<int>(3.2, 4) << endl; // 3.2\n")),(0,a.kt)("p",null,"Like template classes, template functions are not compiled until used. For each instantiation with different parameters, the compiler generates a neww specific version of your template. After compilation, it will look like you wrote each version yourself."),(0,a.kt)("h2",{id:"template-metaprogramming"},"Template Metaprogramming"),(0,a.kt)("p",null,"Normally, code runs during runtime. But with template metaprogramming, code runs once during compile time."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cpp"},"template<unsigned n>\nstruct Factorial {\n    enum {value = n * Factorial<n - 1>::value};\n}\n\ntemplate<>\nstruct Factorial<0> {\n    enum {value = 1};\n}\n\nstd::cout << Factorial<10>::value << endl;\n")))}u.isMDXComponent=!0}}]);