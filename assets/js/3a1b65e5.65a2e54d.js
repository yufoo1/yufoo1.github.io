"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6863],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>y});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),u=s(n),d=o,y=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(y,c(c({ref:t},p),{},{components:n})):r.createElement(y,c({ref:t},p))}));function y(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[u]="string"==typeof e?e:o,c[1]=i;for(var s=2;s<a;s++)c[s]=n[s];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},2877:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>s});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:11},c="Special Member Functions",i={unversionedId:"cpp/Special Member Functions",id:"cpp/Special Member Functions",title:"Special Member Functions",description:"Intro to Special Member Functions",source:"@site/docs/cpp/Special Member Functions.md",sourceDirName:"cpp",slug:"/cpp/Special Member Functions",permalink:"/docs/cpp/Special Member Functions",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Special Member Functions.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11},sidebar:"tutorialSidebar",previous:{title:"Operators",permalink:"/docs/cpp/Operators"},next:{title:"Move Semantics",permalink:"/docs/cpp/Move Semantics"}},l={},s=[{value:"Intro to Special Member Functions",id:"intro-to-special-member-functions",level:2},{value:"Member Initializer Lists",id:"member-initializer-lists",level:2},{value:"Deep Copy and Shallow Copy",id:"deep-copy-and-shallow-copy",level:2},{value:"Delete",id:"delete",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"special-member-functions"},"Special Member Functions"),(0,o.kt)("h2",{id:"intro-to-special-member-functions"},"Intro to Special Member Functions"),(0,o.kt)("p",null,"Special member functions are(usually) automatically generated by the compiler."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Default construction: object created with no parameters.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Copy construction: object is created as a copy of an existing object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Copy assignment: existing object replaced as a copy of another existing object.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Destruction: object destroyed when it is out of scope."))),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"vector<int> function(vector<int> vec0) {\n    // Default constructor creates empty vector\n    vector<int> vec1;\n    // Not a special member function, creates a vector {0, 0, 0}\n    vector<int> vec2(3);\n    // Also not a special member function, uses initializer_list\n    vector<int> vec3{3};\n    // This is a function declaration\n    vector<int> vec4();\n    // Copy constructor, vec created as a copy of another one\n    vector<int> vec5(vec2);\n    // Also the default constructor\n    vector<int> vec6{};\n    // Copy constructor\n    vector<int> vec7{vec3 + vec4};\n    // Copy constructor, vec8 is newly constructed\n    vector<int> vec8 = vec4;\n    // Copy assignment, vec8 is an existing object\n    vec8 = vec2;\n    // Copy constructor, copies vec8 to location outside of func\n    return vec8;\n    // Destructors on all values(except return value) are called\n}\n")),(0,o.kt)("h2",{id:"member-initializer-lists"},"Member Initializer Lists"),(0,o.kt)("p",null,"Members are first default constructed."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename T>\nvector<T>::vector<T>() {\n    _size = 0;\n    _capacity = kInitialSize;\n    _elems = new T[kInitialSize];\n}\n")),(0,o.kt)("p",null,"Directly construct each member with a starting value."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename T>\nvector<T>::vector<T>(): _size(0), _capacity(kInitialSize), _elems(new T[kInitialSize]) {}\n")),(0,o.kt)("h2",{id:"deep-copy-and-shallow-copy"},"Deep Copy and Shallow Copy"),(0,o.kt)("p",null,"The default compiler-generated copy constructor and copy assignment functions work by ",(0,o.kt)("inlineCode",{parentName:"p"},"copying each member variable"),". If you want to do deep copy, you might want to overwrite the default special member functions with your own implementation."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"template<typename T>\nvector::vector<T>(const vector<T>& other):\n    _size(other._size), \n    _capacity(other.capacity),\n    _elems = new T[other._capacity] {\n        std::copy(other._elems, other._elems + other._size, _elems);\n    }\n\ntemplate<typename T>\nvector<T>& vector<T>::operator=(const vector<T>& other) {\n    if(&other == this) return *this;\n    _size = other._size;\n    _capacity = other._capacity;\n    _elems = new T[other._capacity];\n    std::copy(other._elems, other._elems + other._size, _elems);\n    return *this;\n}\n")),(0,o.kt)("h2",{id:"delete"},"Delete"),(0,o.kt)("p",null,"To prevent copies from being created, you can explicitly delete the copy member functions."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class PasswordManager {\n    public:\n        PasswordManager();\n        ~PasswordManager();\n        PasswordManager(const PasswordManager& rhs) = delete;\n        PasswordManager& operator=(const PasswordManager& rhs) = delete;\n    private:\n}\n")))}u.isMDXComponent=!0}}]);