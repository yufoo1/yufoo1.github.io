"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1552],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},y=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),d=s(n),y=r,m=d["".concat(p,".").concat(y)]||d[y]||c[y]||i;return n?a.createElement(m,l(l({ref:t},u),{},{components:n})):a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=y;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o[d]="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}y.displayName="MDXCreateElement"},8109:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>l,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={sidebar_position:1},l="Types and Structs",o={unversionedId:"cpp/Types and Structs",id:"cpp/Types and Structs",title:"Types and Structs",description:"Types",source:"@site/docs/cpp/Types and Structs.md",sourceDirName:"cpp",slug:"/cpp/Types and Structs",permalink:"/docs/cpp/Types and Structs",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Types and Structs.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"CPP",permalink:"/docs/category/cpp"},next:{title:"Initialization and References",permalink:"/docs/cpp/Initialization and References"}},p={},s=[{value:"Types",id:"types",level:2},{value:"Statically typed and Dynamically typed",id:"statically-typed-and-dynamically-typed",level:3},{value:"Overloading",id:"overloading",level:3},{value:"Intro to Structs",id:"intro-to-structs",level:2},{value:"Struct Define and Initialization",id:"struct-define-and-initialization",level:3},{value:"Pair",id:"pair",level:3},{value:"Type Deduction with <code>auto</code>",id:"type-deduction-with-auto",level:2}],u={toc:s};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"types-and-structs"},"Types and Structs"),(0,r.kt)("h2",{id:"types"},"Types"),(0,r.kt)("h3",{id:"statically-typed-and-dynamically-typed"},"Statically typed and Dynamically typed"),(0,r.kt)("p",null,"C++ is a ",(0,r.kt)("inlineCode",{parentName:"p"},"statically typed")," language, which means everything with a name(variables, functions, etc) is given a type ",(0,r.kt)("inlineCode",{parentName:"p"},"before runtime"),". Statically typed language is compiled language and types before program runs during compilation, which helps us to prevent errors before our code runs."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Dynamically typed")," means that everything with a name is given a type ",(0,r.kt)("inlineCode",{parentName:"p"},"at runtime based on the thing's current value"),". Dynamically typed language is interpreted language and types checked on the fly, during execution, line by line."),(0,r.kt)("h3",{id:"overloading"},"Overloading"),(0,r.kt)("p",null,"To define two functions with the same name but different types, we can use ",(0,r.kt)("inlineCode",{parentName:"p"},"overloading"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"int half(int x, int divisor = 2) {\n    return x / divisor;\n}\n\ndouble half(double x) {\n    return x / 2;\n}\n\n\n/*\nhalf(4);\nhalf(3, 3);\nhalf(3.0);\n*/\n")),(0,r.kt)("h2",{id:"intro-to-structs"},"Intro to Structs"),(0,r.kt)("h3",{id:"struct-define-and-initialization"},"Struct Define and Initialization"),(0,r.kt)("p",null,"Struct is a group of named variables each with their own type, a way to bundle different types together."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},"struct Student {\n    string name;\n    string state;\n    int age;\n};\n")),(0,r.kt)("p",null,"You can use abbreviated syntax to initialize a struct:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'Student s;\ns.name = "Ken";\ns.state = "CA";\ns.age = 21;\n\n')),(0,r.kt)("p",null,"In the same as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'Student s = {"Ken", "CA", 21};\n')),(0,r.kt)("h3",{id:"pair"},"Pair"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"std::pair")," is an STL built-in struct with two fields of any type. It is a ",(0,r.kt)("inlineCode",{parentName:"p"},"template"),", which means you specify the types of the fields inside < > for each pair object you make. The fields in ",(0,r.kt)("inlineCode",{parentName:"p"},"std::pair"),"s are named ",(0,r.kt)("inlineCode",{parentName:"p"},"first")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"second"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::pair<int, string> numSuffix = {1, "st"};\ncout << numSuffix.first << numSuffix.second;\n')),(0,r.kt)("p",null,"To avoid specifying the types of a pair, use ",(0,r.kt)("inlineCode",{parentName:"p"},"std::make_pair(field1m field2)"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'std::pair<bool, Student> lookupStudent(string name) {\n    Student blank;\n    if(notFound(name)) return std::make_pair(false, blank);\n    Student result = getStudentWithName(name);\n    return std::make_pair(true, result);\n}\n\n\nstd::pair<bool, Student> output = lookupStudent("Julie");\n')),(0,r.kt)("h2",{id:"type-deduction-with-auto"},"Type Deduction with ",(0,r.kt)("inlineCode",{parentName:"h2"},"auto")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"auto")," is a keyword used in lieu of type when declaring a variable, tells the compiler to deduce the type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cpp"},'auto a = 3;\nauto b = 3.14;\nauto c = \'X\';\nauto d = "Hello World!";\nauto e = std::make_pair(1, "Hello");\n')))}d.isMDXComponent=!0}}]);