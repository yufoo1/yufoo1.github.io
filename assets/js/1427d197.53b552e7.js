"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[6524],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var s=n.createContext({}),l=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):p(p({},t),e)),r},c=function(e){var t=l(e.components);return n.createElement(s.Provider,{value:t},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=l(r),d=o,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||a;return r?n.createElement(f,p(p({ref:t},c),{},{components:r})):n.createElement(f,p({ref:t},c))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,p=new Array(a);p[0]=d;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i[u]="string"==typeof e?e:o,p[1]=i;for(var l=2;l<a;l++)p[l]=r[l];return n.createElement.apply(null,p)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},669:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>p,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const a={sidebar_position:10},p="Operators",i={unversionedId:"cpp/Operators",id:"cpp/Operators",title:"Operators",description:"Operator Overloading",source:"@site/docs/cpp/Operators.md",sourceDirName:"cpp",slug:"/cpp/Operators",permalink:"/docs/cpp/Operators",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Operators.md",tags:[],version:"current",sidebarPosition:10,frontMatter:{sidebar_position:10},sidebar:"tutorialSidebar",previous:{title:"Functions and Lambdas",permalink:"/docs/cpp/Functions and Lambdas"},next:{title:"Special Member Functions",permalink:"/docs/cpp/Special Member Functions"}},s={},l=[{value:"Operator Overloading",id:"operator-overloading",level:2}],c={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"operators"},"Operators"),(0,o.kt)("h2",{id:"operator-overloading"},"Operator Overloading"),(0,o.kt)("p",null,"Operator overloading tells C++ what it means to use an operator on a class we've written ourselves. There are two ways to do it:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Member functions")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},"Non-member functions"))),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"Member functions"),", you should add a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"operator@")," to your class:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"class Time {\n    bool operator<(const Time& rhs) const;\n    Time operator+(const Time& rhs) const;\n    bool operator!() const;\n}\n")),(0,o.kt)("p",null,"Then, call the function with ",(0,o.kt)("inlineCode",{parentName:"p"},"this")," as the left hand side of the expression."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"Time a, b;\nif(a.operator<(b)) {\n    // do something\n}\n")),(0,o.kt)("p",null,"Binary operators accept the right hand side as an argument while unary operators don't take any arguments."),(0,o.kt)("p",null,"For ",(0,o.kt)("inlineCode",{parentName:"p"},"non-member functions"),", you should add a function called ",(0,o.kt)("inlineCode",{parentName:"p"},"p[erator@")," outside of your class and it takes all of its arguments."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"bool operator<(const Time& lhs, const Time& rhs);\nTime operator+(const Time& lhs, const Time& rhs);\nTime& operator+=(Time& lhs, const Time& rhs);\nTime operator!(const Time& lhs);\n")),(0,o.kt)("p",null,"The STL prefers using non-member functions for operator overloading. To allow non-member function to access ",(0,o.kt)("inlineCode",{parentName:"p"},"private")," members, you should use ",(0,o.kt)("inlineCode",{parentName:"p"},"friend"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},"// fraction.h\nclass Fraction {\n    friend Fraction operator*(const Fraction& lhs, const Fraction& rhs);\n    friend ostream& operator<<(ostream& out, const Fraction& target);\n}\n")))}u.isMDXComponent=!0}}]);