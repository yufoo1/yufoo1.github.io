"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5987],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>f});var r=n(7294);function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){s(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,s=function(e,t){if(null==e)return{};var n,r,s={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(s[n]=e[n]);return s}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(s[n]=e[n])}return s}var i=r.createContext({}),p=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(i.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,s=e.mdxType,a=e.originalType,i=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),m=p(n),d=s,f=m["".concat(i,".").concat(d)]||m[d]||u[d]||a;return n?r.createElement(f,o(o({ref:t},l),{},{components:n})):r.createElement(f,o({ref:t},l))}));function f(e,t){var n=arguments,s=t&&t.mdxType;if("string"==typeof e||s){var a=n.length,o=new Array(a);o[0]=d;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c[m]="string"==typeof e?e:s,o[1]=c;for(var p=2;p<a;p++)o[p]=n[p];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8640:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>p});var r=n(7462),s=(n(7294),n(3905));const a={sidebar_position:7},o="Template Classes and Const Correctness",c={unversionedId:"cpp/Template Classes and Const Correctness",id:"cpp/Template Classes and Const Correctness",title:"Template Classes and Const Correctness",description:"Template Classes",source:"@site/docs/cpp/Template Classes and Const Correctness.md",sourceDirName:"cpp",slug:"/cpp/Template Classes and Const Correctness",permalink:"/docs/cpp/Template Classes and Const Correctness",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/cpp/Template Classes and Const Correctness.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Classes",permalink:"/docs/cpp/Classes"},next:{title:"Template Functions",permalink:"/docs/cpp/Template Functions"}},i={},p=[{value:"Template Classes",id:"template-classes",level:2},{value:"Member Types",id:"member-types",level:3},{value:"Type Aliases",id:"type-aliases",level:3},{value:"Const Correctness",id:"const-correctness",level:2}],l={toc:p};function m(e){let{components:t,...n}=e;return(0,s.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"template-classes-and-const-correctness"},"Template Classes and Const Correctness"),(0,s.kt)("h2",{id:"template-classes"},"Template Classes"),(0,s.kt)("h3",{id:"member-types"},"Member Types"),(0,s.kt)("p",null,"Sometimes, we need a name for a type that is dependent on our template types."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// vector.h\ntemplate<typename T> class vector {\n    public:\n        using iterator = T* // something internal like T*\n        iterator begin();\n}\n\n// vector.cpp\ntemplate <typename T>\ntypename vector<T>::iterator vector<T>::begin() {...}\n")),(0,s.kt)("h3",{id:"type-aliases"},"Type Aliases"),(0,s.kt)("p",null,"You can use ",(0,s.kt)("inlineCode",{parentName:"p"},"using type_name = type")," in application code as well. When  using it in a class interface, it defines a nested type, like ",(0,s.kt)("inlineCode",{parentName:"p"},"vector::iterator"),". When using it in application code, it just creates another name for ",(0,s.kt)("inlineCode",{parentName:"p"},"type")," within that scope."),(0,s.kt)("h2",{id:"const-correctness"},"Const Correctness"),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"const")," keyword indicating a variable, function or parameter can't be modified."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"// student.cpp\nstd::string Student::getName() const {\n    return name;\n}\n\n\n// main.cpp\nstd::string stringify(const Student& s) {\n    return s.getName();\n}\n")),(0,s.kt)("p",null,(0,s.kt)("inlineCode",{parentName:"p"},"const-interface")," means all member functions marked ",(0,s.kt)("inlineCode",{parentName:"p"},"const")," in a class definition. Objects of type ",(0,s.kt)("inlineCode",{parentName:"p"},"const ClassName")," may only use the cons-interface."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-cpp"},"using iterator = std::string*;\nusing const_iterator = const std::string*;\nconst iterator it_c = vec.begin(); // const ptr to non-const obj\nconst_interator c_it = vec.begin(); // non-const ptr to const obj\nconst const_iterator c_it_c = vec.begin(); // const ptr to const obj\n")))}m.isMDXComponent=!0}}]);