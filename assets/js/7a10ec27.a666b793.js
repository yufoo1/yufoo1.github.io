"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[1763],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),m=a,h=c["".concat(s,".").concat(m)]||c[m]||d[m]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[c]="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},588:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>p});var r=n(7462),a=(n(7294),n(3905));const o={sidebar_position:8},i="IO",l={unversionedId:"haskell/IO",id:"haskell/IO",title:"IO",description:"Taste of IO",source:"@site/docs/haskell/IO.md",sourceDirName:"haskell",slug:"/haskell/IO",permalink:"/docs/haskell/IO",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/haskell/IO.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Design Patterns for Typed Functional Programming",permalink:"/docs/haskell/Design Patterns for Typed Functional Programming"},next:{title:"cpp",permalink:"/docs/category/cpp"}},s={},p=[{value:"Taste of IO",id:"taste-of-io",level:2},{value:"What About Purity",id:"what-about-purity",level:3},{value:"What About Haskell Programs",id:"what-about-haskell-programs",level:3}],u={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"io"},"IO"),(0,a.kt)("h2",{id:"taste-of-io"},"Taste of IO"),(0,a.kt)("p",null,"Things like reading input, writing to a file, or talking over the network are side effects. However, representing side-effects and impurity in a pure language is possible. There are many ways of doing it, and the Haskell way is to use ",(0,a.kt)("inlineCode",{parentName:"p"},"Monads"),"."),(0,a.kt)("p",null,"Here's a taste of the ",(0,a.kt)("inlineCode",{parentName:"p"},"IO")," Monad, which you can use for all sorts of side effects in Haskell."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},"Prelude> :t getLine\ngetLine :: IO String\nPrelude> line <- getLine\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"IO")," action ",(0,a.kt)("inlineCode",{parentName:"p"},"getLine")," has type ",(0,a.kt)("inlineCode",{parentName:"p"},"IO String"),", which means that ",(0,a.kt)("inlineCode",{parentName:"p"},"GHCi")," can execute the action to produce a value of type String."),(0,a.kt)("p",null,"When we enter ",(0,a.kt)("inlineCode",{parentName:"p"},"line <- getLine")," into GHCi, we mean that: Execute the IO action getLine, and give the result the name line."),(0,a.kt)("p",null,"Some IO actions take parameters. For example ",(0,a.kt)("inlineCode",{parentName:"p"},"putStrLn :: String -> IO ()")," takes a String and returns an IO action that prints that string. The ",(0,a.kt)("inlineCode",{parentName:"p"},"()")," type is a special type that only has one value, ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},'Prelude> :t putStrLn\nputStrLn :: String -> IO ()\nPrelude> :t putStrLn "hello"\nputStrLn "hello" :: IO ()\nPrelude> val <- putStrLn "hello"\nhello\nPrelude> val\n()\n')),(0,a.kt)("p",null,"If you don't need the return value of an IO action, you can run it in GHCi without the ",(0,a.kt)("inlineCode",{parentName:"p"},"<-"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},'Prelude> putStrLn "hello"\nhello\n')),(0,a.kt)("p",null,"You can build your own IO actions by combining other actions with ",(0,a.kt)("inlineCode",{parentName:"p"},"do-notation"),". A ",(0,a.kt)("inlineCode",{parentName:"p"},"do")," block lists IO actions that are executed in order."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-haskell"},'greet :: IO ()\ngreet = do\n  putStrLn "What\'s your name?"\n  name <- getLine\n  putStrLn ("Hello, " ++ name)\n')),(0,a.kt)("h3",{id:"what-about-purity"},"What About Purity"),(0,a.kt)("p",null,"It's important to remember the distinction between ",(0,a.kt)("inlineCode",{parentName:"p"},"defining")," an IO action and ",(0,a.kt)("inlineCode",{parentName:"p"},"executing")," it. Defining IO actions is pure, it's running them that causes side effects."),(0,a.kt)("h3",{id:"what-about-haskell-programs"},"What About Haskell Programs"),(0,a.kt)("p",null,"The way Haskell programs work is that the IO action called ",(0,a.kt)("inlineCode",{parentName:"p"},"main")," gets executed when the program is run."))}c.isMDXComponent=!0}}]);