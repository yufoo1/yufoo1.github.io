"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[2907],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var o=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},l=Object.keys(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(o=0;o<l.length;o++)t=l[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=o.createContext({}),i=function(e){var n=o.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=i(e.components);return o.createElement(c.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=i(t),p=r,g=u["".concat(c,".").concat(p)]||u[p]||m[p]||l;return t?o.createElement(g,a(a({ref:n},d),{},{components:t})):o.createElement(g,a({ref:n},d))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=p;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[u]="string"==typeof e?e:r,a[1]=s;for(var i=2;i<l;i++)a[i]=t[i];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4783:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var o=t(7462),r=(t(7294),t(3905));const l={sidebar_position:5},a="Demo of Backend Development Using Gin",s={unversionedId:"web-app-development/Demo of Backend Development Using Gin",id:"web-app-development/Demo of Backend Development Using Gin",title:"Demo of Backend Development Using Gin",description:"Now is just list of the code simply, all of the examples in it are the ones I actually used in my project. The follow-up will be added to introduce some more advanced usage, such as calling Ali Cloud API, WebSocket, etc.",source:"@site/docs/web-app-development/Demo of Backend Development Using Gin.md",sourceDirName:"web-app-development",slug:"/web-app-development/Demo of Backend Development Using Gin",permalink:"/docs/web-app-development/Demo of Backend Development Using Gin",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/web-app-development/Demo of Backend Development Using Gin.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Use JDBC to Connect MySQL in Native Android App",permalink:"/docs/web-app-development/Use JDBC to Connect Database in Native Android App"},next:{title:"Risc-V \u64cd\u4f5c\u7cfb\u7edf\u79fb\u690d",permalink:"/docs/category/risc-v-\u64cd\u4f5c\u7cfb\u7edf\u79fb\u690d"}},c={},i=[{value:"Create Your First Route",id:"create-your-first-route",level:2},{value:"Cross-Domain",id:"cross-domain",level:2},{value:"Connect MySQL and CRUD",id:"connect-mysql-and-crud",level:2},{value:"Connect MongoDB and CRUD",id:"connect-mongodb-and-crud",level:2},{value:"Connect Redis and CRUD",id:"connect-redis-and-crud",level:2},{value:"Connect OSS and CRUD",id:"connect-oss-and-crud",level:2}],d={toc:i};function u(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"demo-of-backend-development-using-gin"},"Demo of Backend Development Using Gin"),(0,r.kt)("p",null,"Now is just list of the code simply, all of the examples in it are the ones I actually used in my project. The follow-up will be added to introduce some more advanced usage, such as calling Ali Cloud API, WebSocket, etc."),(0,r.kt)("h2",{id:"create-your-first-route"},"Create Your First Route"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/gin-gonic/gin"\n)\n\nfunc main() {\n    r := gin.Default()\n    r.GET("/", func(c *gin.Context) {\n        c.String(http.StatusOK, "Hello World")\n    })\n    r.Run(":8080")\n}\n')),(0,r.kt)("p",null,"Through the example above, you can create your first route and visit it in browser by ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost:8080"),"."),(0,r.kt)("h2",{id:"cross-domain"},"Cross-Domain"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func Cors() gin.HandlerFunc {\n    return func(c *gin.Context) {\n        method := c.Request.Method\n        c.Header("Access-Control-Allow-Origin", "*")\n        c.Header("Access-Control-Allow-Methods", "POST, GET, OPTIONS, PUT, DELETE, UPDATE")\n        c.Header("Access-Control-Allow-Headers", "*")\n        c.Header("Access-Control-Expose-Headers", "Content-Length, Access-Control-Allow-Origin, Access-Control-Allow-Headers, Cache-Control, Content-Language, Content-Type")\n        c.Header("Access-Control-Allow-Credentials", "true")\n        if method == "OPTIONS" {\n            c.AbortWithStatus(http.StatusNoContent)\n        }\n        c.Next()\n    }\n}\n')),(0,r.kt)("h2",{id:"connect-mysql-and-crud"},"Connect MySQL and CRUD"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func ConnectMysql() {\n    loginReq := fmt.Sprintf("%s:%s@tcp(%s:%d)/%s",\n        global.MysqlUsername,\n        global.MysqlPassword,\n        global.MysqlHost,\n        global.MysqlPort,\n        global.MysqlDatabase)\n    database, err := sqlx.Open("mysql", loginReq)\n    if err != nil {\n        fmt.Println("Connect MySQL Failed,", err)\n        return\n    } else {\n        fmt.Println("Connect MySQL Successfully")\n    }\n    global.MysqlDb = database\n}\n\n// Query\nerr = global.MysqlDb.Select(&idArr, "select id from user_login where username=?", username)\n\n// Insert\nr, err := global.MysqlDb.Exec("insert into user_login(username, password, phone)values(?, ?, ?)", username, password, phone)\n\n// Delete\nr, err := global.MysqlDb.Exec("delete from user_login where username=?", username)\n\n// Update\nr, err = global.MysqlDb.Exec("update user_login set username=? where id=?", username, id)\n')),(0,r.kt)("h2",{id:"connect-mongodb-and-crud"},"Connect MongoDB and CRUD"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Connect\nfunc ConnectMongodb() {\n    c, cancel := context.WithTimeout(context.Background(), 10*time.Second)\n    defer cancel()\n    uri := fmt.Sprintf(\n        "mongodb://%s:%s@%s:%d/dedeket?authMechanism=SCRAM-SHA-256&ssl=false",\n        global.MongodbUsername,\n        global.MongodbPassword,\n        global.MongodbHost,\n        global.MongodbPort,\n    )\n    client, err := mongo.Connect(\n        c,\n        options.Client().ApplyURI(uri),\n    )\n    if err != nil {\n        fmt.Println(err)\n    } else {\n        fmt.Println("Connect MongoDB Successfully")\n    }\n    global.MongoDb = client.Database(global.MongodbDatabase)\n}\n\ntype TextbookComment struct {\n    TextbookId string `bson:"textbookId"`\n    Sender     string `bson:"sender"`\n    Comment    string `bson:"comment"`\n    CreatedAt  string `bson:"createdAt"`\n}\n\nfunc (TextbookComment) CollectionName() string {\n    return "user_textbook_comment"\n}\n\n// Insert One\nfunc InsertOneTextbookComment(textbookComment *TextbookComment) {\n    _, err := global.MongoDb.Collection(TextbookComment{}.CollectionName()).InsertOne(context.Background(), textbookComment)\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n\n// Delete\nfunc DeleteTextbookAllComment(textbookId string) {\n    _, err := global.MongoDb.Collection(TextbookComment{}.CollectionName()).DeleteMany(context.Background(), bson.M{"textbookId": textbookId})\n    if err != nil {\n        fmt.Println(err)\n    }\n}\n')),(0,r.kt)("h2",{id:"connect-redis-and-crud"},"Connect Redis and CRUD"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'// Connect\nfunc ConnectRedis() {\n    global.RedisDb = redis.NewClient(&redis.Options{\n        Addr:     global.RedisAddr,\n        Password: global.RedisPassword,\n        DB:       global.RedisDatabase,\n    })\n    fmt.Println("Connect Redis Successfully")\n}\n\n// Set\nglobal.RedisDb.Set(c, "username", username, time.Minute*15)\n\n// Delete\nglobal.RedisDb.Del(c, "username")\n\n// Get\nusername, err := global.RedisDb.Get(c, "username").Result()\n')),(0,r.kt)("h2",{id:"connect-oss-and-crud"},"Connect OSS and CRUD"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go"},'func ConnectOss() {\n client, err := oss.New(global.OssEndpoint, global.OssAccessKeyId, global.OssAccessKeySecret)\n if err != nil {\n  fmt.Println(err)\n }\n bucket, err := client.Bucket(global.OssBucketName)\n if err != nil {\n  fmt.Println(err)\n }\n global.OssBucket = bucket\n fmt.Println("Connect OSS Successfully")\n}\n\n// Insert or update\nerr = global.OssBucket.PutObjectFromFile("TARGET PATH IN OSS", "LOCAL PATH")\n')))}u.isMDXComponent=!0}}]);